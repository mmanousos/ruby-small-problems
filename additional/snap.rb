=begin
*assignment*
SNAP

Flash has invited his nemesis The Turtle (He actually was a real villain! ) to
play his favourite card game, SNAP. In this game a 52 card deck is dealt out so
both Flash and the Turtle get 26 random cards.

Each players cards will be represented by an array like below

Flash’s pile: [ 'A', '5', 'Q', 'Q', '6', '2', 'A', '9', '10', '6', '4', '3',
'10', '9', '3', '8', 'K', 'J', 'J', 'K', '7', '9', '5', 'J', '7', '2' ]

Turtle’s pile: [ '8', 'A', '2', 'Q', 'K', '8', 'J', '6', '4', '8', '7', 'A',
'5', 'K', '3', 'Q', '6', '9', '4', '3', '4', '10', '2', '7', '10', '5' ]

The players take it in turn to take the top card from their deck (the first
element in their array) and place it in a face up pile in the middle. Flash goes
first.

When a card is placed on the face up pile that matches the card it is placed on
top of the first player to shout ‘SNAP!’ wins that round. Due to Flash's speed
he wins every round.

Face up pile in the middle: [ 'A', '8', '5', 'A', 'Q', '2', 'Q', 'Q', => SNAP!

The face up pile of cards in the middle are added to the bottom of Flash's pile.

Flash’s pile after one round: ['6', '2', 'A', '9', '10', '6', '4', '3', '10',
'9', '3', '8', 'K', 'J', 'J', 'K', '7', '9', '5', 'J', '7', '2', 'A', '8', '5',
'A', 'Q', '2', 'Q', 'Q' ]

Flash then starts the next round by putting down the next card.

When Turtle runs out of cards the game is over.

How many times does Flash get to call Snap before Turtle runs out of cards?

If both the player put down all their cards into the middle without any matches
then the game ends a draw and Flash calls SNAP 0 times.


*problem*
input: two arrays of strings.
output: integer indicating the number of times the same string appears in both
arrays at the same time.


*examples / test cases *
snap([ '3','K','5','A','5','6','7','J','7','9','10','Q','Q','6','8','7','4','J',
'8','9','K','J','10','4','K','4' ], [ '2','8','9','Q','A','K','6','3','J','2',
'4','3','3','8','A','2','6','7','9','10','A','5','Q','10','2','5' ]) == 2
snap([ '9','5','4','4','A','8','4','3','K','J','J','Q','Q','9','8','5','J','6',
'7','6','A','J','9','K','3','8' ], [ 'K','10','3','4','5','Q','2','7','A','A','
Q','10','6','5','K','6','7','10','2','9','2','10','7','8','2','3' ]) == 6
snap([ '3','9','8','2','6','Q','9','3','6','9','6','A','7','10','6','7','A','Q',
'Q','10','5','2','9','4','A','3' ], [ 'Q','K','5','7','10','4','8','2','3','J',
'J','5','8','5','10','8','K','K','7','2','J','4','A','J','4','K' ]) == 0
snap([ '3','Q','2','4','2','K','7','8','6','K','2','4','3','8','A','10','Q','8',
'10','J','K','7','6','9','J','9' ], [ '3','4','9','J','5','8','4','10','A','7',
'Q','A','9','10','J','K','2','Q','3','6','5','5','5','A','6','7' ]) == 1
snap([ 'K','5','7','10','10','10','7','3','3','9','9','8','4','J','6','J','Q',
'J','K','9','4','A','5','5','2','J' ], [ '6','4','8','3','4','10','9','A','5',
'Q','2','K','A','6','2','8','A','7','6','7','Q','K','8','3','2','Q' ]) == 2
snap([ '8','8','4','7','7','A','3','4','5','2','J','2','J','K','7','K','J','10',
'5','A','8','3','3','Q','9','K' ], [ '6','6','5','A','A','Q','6','9','6','3',
'10','5','10','9','8','2','10','2','Q','J','4','Q','9','K','4','7' ]) == 5

*data structures*
arrays

*algorithm*
BEGIN
  declare a method that takes two arrays (flash_pile, turtle_pile) as arguments
    SET snap_count = 0
    SET played = [] empty array to represent cards played before SNAP is called
    player = flash

    IF player == flash
      current_card = flash_pile.shift
      player = turtle
    ELSE
      current_card = turtle_pile.shift
      player = flash
    end

    played << current_card

    IF current_card == played[-2]
      snap_count += 1
      player = flash
      flash << played
      played.clear
    ELSE
      current_card
      play continues until snap

    loop continues until turtle.size == 0
    snap_count
END
=end

# passes samples
# doesn't pass all of the random checks generated by CodeWars. :( ??
# every failed check is too low by 1 

def snap(flash_pile, turtle_pile)
  snap_count = 0
  played = []
  player = 'flash'

  while turtle_pile.size > 0
    if player == 'flash'
      current_card = flash_pile.shift
      player = 'turtle'
    else
      current_card = turtle_pile.shift
      player = 'flash'
    end

    played << current_card

    if current_card == played[-2]
      snap_count += 1
      player = 'flash'
      flash_pile << played
      played.clear
    end
  end

  snap_count
end

p snap([ '3','K','5','A','5','6','7','J','7','9','10','Q','Q','6','8','7','4','J','8','9','K','J','10','4','K','4' ],
       [ '2','8','9','Q','A','K','6','3','J','2','4','3','3','8','A','2','6','7','9','10','A','5','Q','10','2','5' ]) == 2
p snap([ '9','5','4','4','A','8','4','3','K','J','J','Q','Q','9','8','5','J','6','7','6','A','J','9','K','3','8' ], [ 'K','10','3','4','5','Q','2','7','A','A','Q','10','6','5','K','6','7','10','2','9','2','10','7','8','2','3' ]) == 6
p snap([ '3','9','8','2','6','Q','9','3','6','9','6','A','7','10','6','7','A','Q','Q','10','5','2','9','4','A','3' ], [ 'Q','K','5','7','10','4','8','2','3','J','J','5','8','5','10','8','K','K','7','2','J','4','A','J','4','K' ]) == 0
p snap([ '3','Q','2','4','2','K','7','8','6','K','2','4','3','8','A','10','Q','8','10','J','K','7','6','9','J','9' ], [ '3','4','9','J','5','8','4','10','A','7','Q','A','9','10','J','K','2','Q','3','6','5','5','5','A','6','7' ]) == 1
p snap([ 'K','5','7','10','10','10','7','3','3','9','9','8','4','J','6','J','Q','J','K','9','4','A','5','5','2','J' ], [ '6','4','8','3','4','10','9','A','5','Q','2','K','A','6','2','8','A','7','6','7','Q','K','8','3','2','Q' ]) == 2
p snap([ '8','8','4','7','7','A','3','4','5','2','J','2','J','K','7','K','J','10','5','A','8','3','3','Q','9','K' ], [ '6','6','5','A','A','Q','6','9','6','3','10','5','10','9','8','2','10','2','Q','J','4','Q','9','K','4','7' ]) == 5
